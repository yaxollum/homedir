#!/bin/python3

import json
import socket
import time
import typing as tp
from contextlib import contextmanager
from dataclasses import dataclass
from pathlib import Path
from threading import Thread

import requests


@dataclass(frozen=True)
class WeatherApiResult:
    sunrise: float  # Unix time
    sunset: float  # Unix time
    conditions: str  # description of weather conditions
    temperature: float  # degrees Celsius


class WeatherApi:
    def __init__(
        self, api_key: str, regular_update_interval: int, error_update_interval: int
    ):
        self.api_key = api_key
        self.regular_update_interval = regular_update_interval
        self.error_update_interval = error_update_interval
        self._cached_result: tp.Optional[WeatherApiResult] = None
        Thread(target=self._data_fetcher).start()

    def _fetch_data(self) -> tp.Optional[WeatherApiResult]:
        try:
            url = f"https://api.openweathermap.org/data/2.5/weather?id=6176823&appid={self.api_key}&units=metric"
            data = requests.get(url).text
            d = json.loads(data)
            return WeatherApiResult(
                sunrise=d["sys"]["sunrise"],
                sunset=d["sys"]["sunset"],
                conditions=d["weather"][0]["description"],
                temperature=d["main"]["temp"],
            )
        except Exception:
            return None

    def _data_fetcher(self):
        while True:
            self._cached_result = self._fetch_data()
            if self._cached_result is None:
                time.sleep(self.error_update_interval)
            else:
                time.sleep(self.regular_update_interval)

    def get_data(self) -> tp.Optional[WeatherApiResult]:
        return self._cached_result


class DiagonatorApi:
    def __init__(self, server_socket: socket.socket):
        self.server_socket = server_socket

    @classmethod
    @contextmanager
    def open(cls, socket_path: str) -> tp.Generator["DiagonatorApi", None, None]:
        while True:
            try:
                with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as server_socket:
                    server_socket.connect(socket_path)
                    yield cls(server_socket)
            except Exception:
                print("Waiting to connect to diagonator server ...", flush=True)
                time.sleep(0.1)

    def _get_response(self, request: tp.Dict[str, tp.Any]) -> tp.Any:
        self.server_socket.sendall(
            json.dumps(request).encode() + b"\n"
        )  # note that the newline ("\n") is required in order to mark the end of the request
        response = b""
        while b"\n" not in response:
            response += self.server_socket.recv(1024)
        return json.loads(response)

    def get_str(self) -> str:
        response = self._get_response({"type": "GetInfo"})
        if response["type"] == "Info":
            unix_time = int(time.time())

            def fmt_remaining_time(t: int) -> str:
                duration = t - unix_time
                minutes = duration // 60
                return f"{minutes} minute{'s'[:minutes!=1]}"

            def fmt_start_time(t: tp.Optional[int]) -> str:
                if t is None:
                    return "start of day"
                else:
                    return time.strftime("%H:%M", time.localtime(t))

            def fmt_end_time(t: tp.Optional[int]) -> str:
                if t is None:
                    return "end of day"
                else:
                    return time.strftime("%H:%M", time.localtime(t))

            info = response["info"]
            if info["deactivated_until"] is None:
                if info["state"] == "Unlockable":
                    msg = "Unlockable"
                elif info["state"] == "Locked":
                    msg = "Locked"
                else:
                    assert info["state"] == "Unlocked"
                    msg = "Unlocked"

                if info["reason"]["type"] == "BreakTimer" and info["until"] is not None:
                    msg += f": {fmt_remaining_time(info['until'])}"
                else:
                    msg += f" until {fmt_end_time(info['until'])}"
            else:
                msg = f"Deactivated: {fmt_remaining_time(info['deactivated_until'])}"

            if info["reason"]["type"] == "RequirementNotMet":
                req_id = info["reason"]["id"]
                req = next(req for req in info["requirements"] if req["id"] == req_id)
                msg += f" (\"{req['name']}\" due at {fmt_start_time(req['due'])})"
            elif info["reason"]["type"] == "LockedTimeRange":
                ltr_id = info["reason"]["id"]
                ltr = next(
                    ltr for ltr in info["locked_time_ranges"] if ltr["id"] == ltr_id
                )
                msg += f" (LTR from {fmt_start_time(ltr['start'])} to {fmt_end_time(ltr['end'])})"
            return msg
        else:
            assert response["type"] == "Error"
            msg = response["msg"]
            return msg


if __name__ == "__main__":
    with open(Path.home() / ".secrets/api/api.openweathermap.org") as key_file:
        api_key = key_file.readline().strip()

    weather_api = WeatherApi(
        api_key=api_key, regular_update_interval=600, error_update_interval=2
    )

    def get_weather_str() -> str:
        d = weather_api.get_data()
        if d is not None:
            sunrise_str = time.strftime("%H:%M", time.localtime(d.sunrise))
            sunset_str = time.strftime("%H:%M", time.localtime(d.sunset))
            return f"{d.conditions} | {d.temperature:.0f} Â°C"
        else:
            return "..."

    with DiagonatorApi.open("/tmp/diagonator-server.sock") as diagonator_api:
        while True:
            weather_str = get_weather_str()
            time_str = time.strftime("%a %Y-%m-%d %H:%M", time.localtime())
            diagonator_str = diagonator_api.get_str()
            print(f"{diagonator_str} | {weather_str} | {time_str} ", flush=True)
            time.sleep(0.1)
